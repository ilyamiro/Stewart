import subprocess
import re
import logging

from pyrogram import Client, filters

logging.debug(f"Running post-commit script: telegram_auto_commit.py")


def replace_repeated_chars(input_string, char):
    pattern = f"{re.escape(char)}+"
    result = re.sub(pattern, char, input_string)
    return result


API_ID = 12345678
API_HASH = "<placeholder>"
CHANNEL = "@stewart_github"

app = Client("post_commit", API_ID, API_HASH)
app.start()

COMMIT_MSG = subprocess.run(['git', 'log', "-1", "--pretty=%B"], capture_output=True, text=True).stdout
COMMIT_HASH = subprocess.run(['git', 'log', "-1", "--pretty=%H"], capture_output=True, text=True).stdout.replace("\n", "")
COMMIT_DATE = subprocess.run(['git', 'log', "-1", "--pretty=%ad", "--date=iso"], capture_output=True, text=True).stdout.replace("\n", "")
COMMIT_AUTHOR = subprocess.run(['git', 'log', "-1", "--pretty=%an"], capture_output=True, text=True).stdout.replace("\n", "")

COMMIT_LINK = f"**[Link to the commit](https://github.com/ilyamiro/Stewart/commit/{COMMIT_HASH})**"

# Get the changes using 'git show' and process it line by line
raw_changes = subprocess.run(['git', 'show', "--stat", "--pretty=", f"{COMMIT_HASH}"], capture_output=True, text=True).stdout

# Split the changes by lines and prefix each line with a bullet point
change_lines = raw_changes.strip().split("\n")
formatted_changes = "\n".join([f"â€¢ {line.strip()}" for line in change_lines if line.strip()])

# Apply character replacement if needed (optional step)
COMMIT_CHANGES = replace_repeated_chars(replace_repeated_chars(formatted_changes, "+"), "-")

SUBMIT_MSG = f"""
**New commit**  

Author: **{COMMIT_AUTHOR}**
Date: **{COMMIT_DATE}**

{COMMIT_MSG}
**Changes**

{COMMIT_CHANGES}

{COMMIT_LINK}

__autogenerated message__
"""

app.send_message(CHANNEL, SUBMIT_MSG)

logging.debug(f"Completed post-commit script: telegram_auto_commit.py")

